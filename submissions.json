[
  {
    "name": "Narendra",
    "email": "n@gmail.com",
    "phone": "123654",
    "experience": "0",
    "position": "SWE",
    "location": "Mumbai",
    "tech_stack": [
      "Java",
      "Python"
    ],
    "questions": [
      "1.  **Java Question (Concurrency):** \"Describe a scenario where using `ExecutorService` in Java is more beneficial than directly creating and managing threads.  What are the potential drawbacks of using a large, unbounded thread pool?\"",
      "4.  **Open Ended (Problem Solving):** \"Imagine you need to build a simple API endpoint that returns a list of users based on their first name.  Which language (Java or Python) would you choose for this project? Justify your choice, considering factors like development speed, performance requirements, and maintainability.\""
    ],
    "answers": [
      "xyz",
      "i would choose python language for that as its development speed in fastAPI is speedy."
    ]
  },
  {
    "name": "n",
    "email": "nn",
    "phone": "n",
    "experience": "n",
    "position": "s",
    "location": "n",
    "tech_stack": [
      "sql"
    ],
    "questions": [
      "1.  Write a SQL query to find the second highest salary from an 'Employees' table. Handle cases where there might not be a second highest salary.",
      "2.  Given two tables, 'Orders' (OrderID, CustomerID, OrderDate) and 'Customers' (CustomerID, CustomerName, City), write a SQL query to retrieve the CustomerName and the total number of orders placed by each customer, only for customers located in 'New York', ordered by the number of orders in descending order.",
      "3.  Explain the difference between `UNION` and `UNION ALL` in SQL. When would you use one over the other?",
      "4.  Describe the purpose of indexing in SQL. How does it improve query performance? What are potential drawbacks of using too many indexes?",
      "5.  Write a SQL query to identify duplicate rows in a table named 'Products' based on 'ProductName' and 'ProductCategory'. Return the duplicated 'ProductName' and 'ProductCategory'."
    ],
    "answers": [
      "z",
      "z",
      "",
      "",
      ""
    ]
  },
  {
    "name": "narendra",
    "email": "n",
    "phone": "a",
    "experience": "a",
    "position": "a",
    "location": "a",
    "tech_stack": [
      "java"
    ],
    "questions": [
      "1.  Explain the difference between `==` and `.equals()` in Java. When should you use each? How do you override `.equals()` correctly?",
      "2.  Describe the SOLID principles. Choose one and explain how it relates to building maintainable Java applications. Provide a concrete example.",
      "3.  Explain the difference between checked and unchecked exceptions in Java. Give examples of each and describe how they should be handled differently.",
      "4.  Discuss the concept of multithreading in Java. Describe potential problems like race conditions and deadlocks. How can you prevent these issues using Java's concurrency features?",
      "5.  Describe the purpose of generics in Java. Explain the difference between using raw types, bounded types, and wildcard types. Give an example of when you might use each."
    ],
    "answers": [
      "",
      "",
      "",
      "",
      ""
    ]
  },
  {
    "name": "a",
    "email": "a",
    "phone": "a",
    "experience": "a",
    "position": "a",
    "location": "a",
    "tech_stack": [
      "java"
    ],
    "questions": [
      "1.  Explain the difference between `==` and `.equals()` in Java. When should you use each? Demonstrate with examples.",
      "2.  Describe the SOLID principles of object-oriented design. Provide an example of how violating the Liskov Substitution Principle can lead to unexpected behavior.",
      "3.  Explain the difference between checked and unchecked exceptions in Java. Provide examples of each and describe how they should be handled differently.",
      "4.  Write a Java program to reverse a linked list. You can use any built-in Java collections class, but demonstrate the core logic.",
      "5.  Describe the purpose and benefits of using the `synchronized` keyword in Java. Explain potential drawbacks and suggest alternative approaches to thread safety."
    ],
    "answers": [
      "a",
      "a",
      "a",
      "a",
      "a"
    ]
  }
]